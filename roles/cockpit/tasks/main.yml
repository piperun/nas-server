---
# roles/cockpit/tasks/main.yml

- name: "Check if SSH password authentication is already enabled"
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config.d/02-enable-passwords.conf
    line: "PasswordAuthentication yes"
    state: absent
  check_mode: true
  register: ssh_password_check
  failed_when: false

- name: "Check main sshd_config for password authentication"
  ansible.builtin.command:
    cmd: grep -E "^PasswordAuthentication\s+(yes|no)" /etc/ssh/sshd_config
  register: main_sshd_config_check
  failed_when: false
  changed_when: false

- name: "Enable SSH password authentication if not already enabled"
  ansible.builtin.copy:
    content: "PasswordAuthentication yes\n"
    dest: /etc/ssh/sshd_config.d/02-enable-passwords.conf
    mode: '0644'
  when: 
    - ssh_password_check.found == 0
    - "'PasswordAuthentication yes' not in main_sshd_config_check.stdout"
  notify: Restart sshd

- name: "Check if Cockpit packages are already installed"
  ansible.builtin.command:
    cmd: rpm -q cockpit-system cockpit-ostree cockpit-podman cockpit-networkmanager
  register: cockpit_packages_check
  failed_when: false
  changed_when: false

- name: "Install Cockpit packages as overlay RPMs"
  community.general.rpm_ostree_pkg:
    name:
      - cockpit-system
      - cockpit-ostree
      - cockpit-podman
      - cockpit-networkmanager
    state: present
  when: cockpit_packages_check.rc != 0
  notify: Reboot to apply OS changes

- name: "Flush handlers to reboot if needed"
  meta: flush_handlers
  when: cockpit_packages_check.rc != 0

- name: "Check if Cockpit systemd service is already installed"
  ansible.builtin.systemd:
    name: "{{ cockpit_service_name }}"
  register: cockpit_service_check
  failed_when: false

- name: "Install Cockpit systemd service (official method)"
  ansible.builtin.command:
    cmd: podman container runlabel INSTALL quay.io/cockpit/ws
  register: cockpit_install_result
  failed_when: false
  changed_when: cockpit_install_result.rc == 0
  when: not cockpit_service_check.status.LoadState | default('not-found') == "loaded"

- name: "Check if Cockpit service is already enabled and running"
  ansible.builtin.systemd:
    name: "{{ cockpit_service_name }}"
  register: cockpit_service_status
  failed_when: false

- name: "Enable and start Cockpit service"
  ansible.builtin.systemd:
    name: "{{ cockpit_service_name }}"
    state: started
    enabled: true
  when: 
    - not cockpit_service_status.status.ActiveState | default('inactive') == "active"
    - not cockpit_service_status.status.UnitFileState | default('disabled') == "enabled"

- name: "Check if Cockpit firewall service is already enabled"
  ansible.builtin.command: firewall-cmd --query-service=cockpit
  register: cockpit_firewall_service
  changed_when: false
  failed_when: false

- name: "Configure firewall for Cockpit"
  ansible.posix.firewalld:
    service: "{{ cockpit_firewall_service }}"
    permanent: true
    state: enabled
    immediate: true
  when: not cockpit_firewall_service.stdout | bool

